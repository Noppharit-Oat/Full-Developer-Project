// src/services/machineCheckService.js

const db = require('../config/database');

class MachineCheckService {
  // ดึงรายการ checklist ตาม frequency
  async getChecklist(frequency) {
    try {
      const query = `
        SELECT 
          ci.id,
          ci.name as item_name,
          ci.thai_name as item_thai_name,
          ci.frequency,
          cg.name as group_name,
          cg.thai_name as group_thai_name
        FROM checklist_items ci
        JOIN checklist_groups cg ON ci.group_id = cg.id
        WHERE ci.frequency = $1
        ORDER BY cg.id, ci.id
      `;
      
      const result = await db.query(query, [frequency]);
      return result.rows;
    } catch (error) {
      throw new Error(`Error fetching checklist: ${error.message}`);
    }
  }

  // บันทึกผลการตรวจเช็ค
  async saveCheckResult(checkData) {
    const client = await db.getClient();
    try {
      await client.query('BEGIN');

      // 1. หา machine_id หรือสร้างใหม่
      let machineResult = await client.query(
        'SELECT id FROM machines WHERE machine_name = $1 AND machine_no = $2',
        [checkData.machineName, checkData.machineNo]
      );

      let machineId;
      if (machineResult.rows.length === 0) {
        const newMachine = await client.query(
          `INSERT INTO machines (machine_name, machine_no, model, customer, family)
           VALUES ($1, $2, $3, $4, $5)
           RETURNING id`,
          [
            checkData.machineName,
            checkData.machineNo,
            checkData.machineModel,
            checkData.machineCustomer,
            checkData.machineFamily
          ]
        );
        machineId = newMachine.rows[0].id;
      } else {
        machineId = machineResult.rows[0].id;
      }

      // 2. สร้าง check record
      const checkRecord = await client.query(
        `INSERT INTO check_records (machine_id, user_id, check_date)
         VALUES ($1, $2, CURRENT_DATE)
         RETURNING id`,
        [machineId, checkData.userId]
      );
      const checkRecordId = checkRecord.rows[0].id;

      // 3. บันทึกผลการเช็คแต่ละรายการ
      for (const item of checkData.checklist) {
        await client.query(
          `INSERT INTO check_items_results 
           (check_record_id, checklist_item_id, status, issue_detail)
           VALUES ($1, $2, $3, $4)`,
          [
            checkRecordId,
            item.id,
            item.status,
            item.status === 'fail' ? item.issueDetail : null
          ]
        );
      }

      await client.query('COMMIT');
      return checkRecordId;

    } catch (error) {
      await client.query('ROLLBACK');
      throw new Error(`Error saving check result: ${error.message}`);
    } finally {
      client.release();
    }
  }

  // ดึงประวัติการตรวจเช็ค
  async getCheckHistory(machineId, startDate, endDate) {
    try {
      const query = `
        SELECT 
          cr.id as record_id,
          cr.check_date,
          u.first_name,
          u.last_name,
          m.machine_name,
          m.machine_no,
          cir.status,
          cir.issue_detail,
          ci.name as item_name,
          ci.thai_name as item_thai_name
        FROM check_records cr
        JOIN machines m ON cr.machine_id = m.id
        JOIN "Users" u ON cr.user_id = u.id
        JOIN check_items_results cir ON cr.id = cir.check_record_id
        JOIN checklist_items ci ON cir.checklist_item_id = ci.id
        WHERE cr.machine_id = $1
        AND cr.check_date BETWEEN $2 AND $3
        ORDER BY cr.check_date DESC, ci.id
      `;
      
      const result = await db.query(query, [machineId, startDate, endDate]);
      return result.rows;
    } catch (error) {
      throw new Error(`Error fetching check history: ${error.message}`);
    }
  }
}

module.exports = new MachineCheckService();